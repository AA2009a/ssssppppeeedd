name: Smart RDP with Tailscale
on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        run: |
          $password = "admin@123"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "HAIDER" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "HAIDER" -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "HAIDER"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "HAIDER"
          }
          echo "RDP_CREDS=User: HAIDER | Password: $password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Install Developer Tools with Chocolatey
        run: |
          choco install git -y
          choco install vscode -y
          choco install python --version=3.12.0 -y
          choco install nodejs-lts -y
          choco install dotnet-8.0-sdk -y

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=tskey-auth-kAAQkEeh5A21CNTRL-2uW6mY3PnAGLidWGDncWAGNVxhGywXs3 --hostname="gh-runner-$env:GITHUB_RUN_ID"
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) -join ""
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Notify via Telegram
        run: |
          $botToken = "7411970363:AAEY9p2pwXgsBZSHAdhc0uV-I2geQM-Umvc"
          $chatId   = "5258815908"
          $message  = "âœ… RDP Ready!`nAddress: $env:TAILSCALE_IP`nUsername: HAIDER`nPassword: admin@123"

          Invoke-RestMethod -Uri "https://api.telegram.org/bot$botToken/sendMessage" `
                            -Method Post `
                            -Body @{ chat_id = $chatId; text = $message }
